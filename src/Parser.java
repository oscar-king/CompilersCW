
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\021\010\000\002\021\006\000\002\021\006" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003\000\002\033\005\000\002\033\004\000\002\034\005" +
    "\000\002\034\004\000\002\037\005\000\002\037\004\000" +
    "\002\064\005\000\002\064\004\000\002\064\003\000\002" +
    "\064\003\000\002\064\005\000\002\064\005\000\002\064" +
    "\004\000\002\064\003\000\002\064\004\000\002\103\005" +
    "\000\002\103\007\000\002\103\006\000\002\103\006\000" +
    "\002\103\005\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\073\004\000\002\072\004\000\002\066\010" +
    "\000\002\061\003\000\002\061\004\000\002\061\004\000" +
    "\002\061\004\000\002\061\003\000\002\061\004\000\002" +
    "\071\006\000\002\071\007\000\002\053\004\000\002\053" +
    "\003\000\002\060\003\000\002\060\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\010\004\000" +
    "\002\012\010\000\002\013\011\000\002\013\011\000\002" +
    "\013\013\000\002\013\013\000\002\013\006\000\002\014" +
    "\004\000\002\015\010\000\002\015\012\000\002\067\006" +
    "\000\002\070\005\000\002\076\003\000\002\076\005\000" +
    "\002\044\004\000\002\044\005\000\002\051\012\000\002" +
    "\051\014\000\002\052\012\000\002\052\014\000\002\107" +
    "\011\000\002\107\002\000\002\106\011\000\002\106\002" +
    "\000\002\046\011\000\002\046\007\000\002\047\006\000" +
    "\002\047\005\000\002\105\004\000\002\031\004\000\002" +
    "\031\002\000\002\026\004\000\002\026\003\000\002\004" +
    "\004\000\002\004\003\000\002\111\005\000\002\111\002" +
    "\000\002\024\004\000\002\025\004\000\002\025\002\000" +
    "\002\074\004\000\002\074\002\000\002\075\004\000\002" +
    "\075\002\000\002\110\004\000\002\110\002\000\002\100" +
    "\006\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\042\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\020\uff84\022\uff84\040\uff84\101\uff84\001\002\000" +
    "\004\002\u0123\001\002\000\042\004\011\005\035\006\032" +
    "\007\021\010\014\011\020\012\031\013\025\014\027\015" +
    "\030\016\022\017\010\020\007\022\012\040\024\101\015" +
    "\001\002\000\056\004\uff85\005\uff85\006\uff85\007\uff85\010" +
    "\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85" +
    "\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\027\uff85\033" +
    "\uff85\036\uff85\037\uff85\040\uff85\101\uff85\001\002\000\026" +
    "\004\011\005\035\006\032\007\021\010\014\011\020\012" +
    "\031\013\025\015\030\101\u010c\001\002\000\004\101\u0102" +
    "\001\002\000\010\057\ufffa\077\ufffa\101\ufffa\001\002\000" +
    "\026\004\011\005\035\006\032\007\021\010\014\011\020" +
    "\012\031\013\025\015\030\101\015\001\002\000\004\101" +
    "\374\001\002\000\010\057\ufffb\077\ufffb\101\ufffb\001\002" +
    "\000\010\057\ufff7\077\ufff7\101\ufff7\001\002\000\004\002" +
    "\000\001\002\000\004\075\373\001\002\000\004\056\366" +
    "\001\002\000\010\057\ufff8\077\ufff8\101\ufff8\001\002\000" +
    "\004\101\363\001\002\000\004\075\362\001\002\000\004" +
    "\071\356\001\002\000\004\056\353\001\002\000\004\075" +
    "\352\001\002\000\004\101\045\001\002\000\010\057\ufff6" +
    "\077\ufff6\101\ufff6\001\002\000\004\056\042\001\002\000" +
    "\010\057\ufff9\077\ufff9\101\ufff9\001\002\000\004\075\041" +
    "\001\002\000\004\075\040\001\002\000\010\057\ufff5\077" +
    "\ufff5\101\ufff5\001\002\000\004\075\037\001\002\000\056" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\027\uffc0\033\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\101\uffc0\001\002\000\056\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\027\uffc2\033\uffc2\036\uffc2\037\uffc2\040\uffc2\101" +
    "\uffc2\001\002\000\056\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\027\uffbf" +
    "\033\uffbf\036\uffbf\037\uffbf\040\uffbf\101\uffbf\001\002\000" +
    "\026\004\011\005\035\006\032\007\021\010\014\011\020" +
    "\012\031\013\025\015\030\101\015\001\002\000\004\057" +
    "\044\001\002\000\010\057\ufffd\077\ufffd\101\ufffd\001\002" +
    "\000\004\041\046\001\002\000\004\071\047\001\002\000" +
    "\054\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\027\uff84\033\uff84\036\uff84" +
    "\037\uff84\101\uff84\001\002\000\004\072\351\001\002\000" +
    "\054\004\011\005\035\006\032\007\021\010\014\011\020" +
    "\012\031\013\025\014\027\015\030\016\022\017\010\020" +
    "\007\021\060\022\012\023\056\027\066\033\052\036\065" +
    "\037\071\101\073\001\002\000\004\067\343\001\002\000" +
    "\034\021\uffba\023\uffba\024\uffba\026\uffba\027\uffba\031\uffba" +
    "\032\uffba\033\uffba\035\uffba\036\uffba\037\uffba\072\uffba\101" +
    "\uffba\001\002\000\032\021\uffaf\023\uffaf\024\uffaf\026\uffaf" +
    "\027\uffaf\031\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf\072" +
    "\uffaf\101\uffaf\001\002\000\004\075\342\001\002\000\004" +
    "\067\321\001\002\000\032\021\060\023\056\024\uff89\026" +
    "\uff89\027\066\031\uff89\032\uff89\033\052\036\065\037\071" +
    "\072\uff89\101\261\001\002\000\040\043\106\046\113\047" +
    "\123\051\101\063\122\067\114\071\115\073\107\075\uffb1" +
    "\101\110\102\124\103\126\104\103\105\102\106\125\001" +
    "\002\000\004\075\316\001\002\000\004\075\315\001\002" +
    "\000\034\021\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6\072\uffb6" +
    "\101\uffb6\001\002\000\032\021\uffb0\023\uffb0\024\uffb0\026" +
    "\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\036\uffb0\037\uffb0" +
    "\072\uffb0\101\uffb0\001\002\000\004\101\314\001\002\000" +
    "\036\043\106\046\113\047\123\051\101\063\122\067\114" +
    "\071\115\073\107\101\110\102\124\103\126\104\103\105" +
    "\102\106\125\001\002\000\004\041\252\001\002\000\004" +
    "\075\251\001\002\000\036\043\106\046\113\047\123\051" +
    "\101\063\122\067\114\071\115\073\107\101\110\102\124" +
    "\103\126\104\103\105\102\106\125\001\002\000\004\072" +
    "\uff7c\001\002\000\012\041\uff9f\067\074\100\075\101\ufff7" +
    "\001\002\000\040\043\106\046\113\047\123\051\101\063" +
    "\122\067\114\070\104\071\115\073\107\101\110\102\124" +
    "\103\126\104\103\105\102\106\125\001\002\000\004\101" +
    "\077\001\002\000\004\041\uff9e\001\002\000\006\041\uff9f" +
    "\100\075\001\002\000\070\030\uffe1\034\uffe1\044\uffe1\045" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\070\uffe1\072\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\077\uffe1\100\uffe1\001\002\000\004\101" +
    "\227\001\002\000\070\030\uffdc\034\uffdc\044\uffdc\045\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\070\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\001\002\000\070\030\uffdd" +
    "\034\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\072" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\001\002\000\004\075\226\001\002\000\070\030\uffe2\034" +
    "\uffe2\044\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\070\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\001" +
    "\002\000\036\043\106\046\113\047\123\051\101\063\122" +
    "\067\114\071\115\073\107\101\110\102\124\103\126\104" +
    "\103\105\102\106\125\001\002\000\040\043\106\046\113" +
    "\047\123\051\101\063\122\067\114\071\115\073\107\074" +
    "\222\101\110\102\124\103\126\104\103\105\102\106\125" +
    "\001\002\000\072\030\uffda\034\uffda\044\uffda\045\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\216\070\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\076\uffda\077\uffda\100\uffda\001\002\000\070\030" +
    "\uffcf\034\uffcf\044\uffcf\045\uffcf\050\uffcf\051\uffcf\052\uffcf" +
    "\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\070\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100" +
    "\uffcf\001\002\000\070\030\uffe0\034\uffe0\044\uffe0\045\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\070\uffe0\072\uffe0\073\uffe0\074\uffe0\075" +
    "\uffe0\076\uffe0\077\uffe0\100\uffe0\001\002\000\070\030\uffd9" +
    "\034\uffd9\044\uffd9\045\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\070\uffd9\072" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9" +
    "\001\002\000\040\043\106\046\113\047\123\051\101\063" +
    "\122\067\114\070\203\071\115\073\107\101\110\102\124" +
    "\103\126\104\103\105\102\106\125\001\002\000\040\043" +
    "\106\046\113\047\123\051\101\063\122\067\114\071\115" +
    "\072\200\073\107\101\110\102\124\103\126\104\103\105" +
    "\102\106\125\001\002\000\070\030\uffca\034\uffca\044\uffca" +
    "\045\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\070\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\100\uffca\001\002\000\064" +
    "\034\136\044\131\045\135\050\154\051\130\052\143\053" +
    "\140\054\134\055\152\056\132\057\141\060\145\061\153" +
    "\062\133\063\150\064\146\065\147\066\144\070\uff87\072" +
    "\uff87\073\137\074\uff87\075\uff87\077\174\100\151\001\002" +
    "\000\070\030\uffce\034\uffce\044\uffce\045\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\070\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce" +
    "\077\uffce\100\uffce\001\002\000\004\070\172\001\002\000" +
    "\036\043\106\046\113\047\123\051\101\063\122\067\114" +
    "\071\115\073\107\101\110\102\124\103\126\104\103\105" +
    "\102\106\125\001\002\000\070\030\uffd8\034\uffd8\044\uffd8" +
    "\045\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\066\uffd8\070\uffd8\072\uffd8\073\uffd8\074" +
    "\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\001\002\000\070" +
    "\030\uffde\034\uffde\044\uffde\045\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\070" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde" +
    "\100\uffde\001\002\000\070\030\uffdf\034\uffdf\044\uffdf\045" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\070\uffdf\072\uffdf\073\uffdf\074\uffdf" +
    "\075\uffdf\076\uffdf\077\uffdf\100\uffdf\001\002\000\070\030" +
    "\uffdb\034\uffdb\044\uffdb\045\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\070\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100" +
    "\uffdb\001\002\000\070\030\uffc9\034\136\044\uffc9\045\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\133\063\150\064\146" +
    "\065\147\066\144\070\uffc9\072\uffc9\073\137\074\uffc9\075" +
    "\uffc9\076\uffc9\077\uffc9\100\151\001\002\000\036\043\uffe6" +
    "\046\uffe6\047\uffe6\051\uffe6\063\uffe6\067\uffe6\071\uffe6\073" +
    "\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6" +
    "\001\002\000\036\043\uffef\046\uffef\047\uffef\051\uffef\063" +
    "\uffef\067\uffef\071\uffef\073\uffef\101\uffef\102\uffef\103\uffef" +
    "\104\uffef\105\uffef\106\uffef\001\002\000\036\043\uffec\046" +
    "\uffec\047\uffec\051\uffec\063\uffec\067\uffec\071\uffec\073\uffec" +
    "\101\uffec\102\uffec\103\uffec\104\uffec\105\uffec\106\uffec\001" +
    "\002\000\036\043\ufff4\046\ufff4\047\ufff4\051\ufff4\063\ufff4" +
    "\067\ufff4\071\ufff4\073\ufff4\101\ufff4\102\ufff4\103\ufff4\104" +
    "\ufff4\105\ufff4\106\ufff4\001\002\000\036\043\uffe8\046\uffe8" +
    "\047\uffe8\051\uffe8\063\uffe8\067\uffe8\071\uffe8\073\uffe8\101" +
    "\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\001\002" +
    "\000\036\043\uffee\046\uffee\047\uffee\051\uffee\063\uffee\067" +
    "\uffee\071\uffee\073\uffee\101\uffee\102\uffee\103\uffee\104\uffee" +
    "\105\uffee\106\uffee\001\002\000\036\043\uffe3\046\uffe3\047" +
    "\uffe3\051\uffe3\063\uffe3\067\uffe3\071\uffe3\073\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\104\uffe3\105\uffe3\106\uffe3\001\002\000" +
    "\040\043\106\046\113\047\123\051\101\063\122\067\114" +
    "\071\115\073\107\076\160\101\110\102\124\103\126\104" +
    "\103\105\102\106\125\001\002\000\036\043\uffe7\046\uffe7" +
    "\047\uffe7\051\uffe7\063\uffe7\067\uffe7\071\uffe7\073\uffe7\101" +
    "\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\001\002" +
    "\000\036\043\uffeb\046\uffeb\047\uffeb\051\uffeb\063\uffeb\067" +
    "\uffeb\071\uffeb\073\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb" +
    "\105\uffeb\106\uffeb\001\002\000\036\043\106\046\113\047" +
    "\123\051\101\063\122\067\114\071\115\073\107\101\110" +
    "\102\124\103\126\104\103\105\102\106\125\001\002\000" +
    "\036\043\uffe4\046\uffe4\047\uffe4\051\uffe4\063\uffe4\067\uffe4" +
    "\071\uffe4\073\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\105" +
    "\uffe4\106\uffe4\001\002\000\036\043\ufff0\046\ufff0\047\ufff0" +
    "\051\ufff0\063\ufff0\067\ufff0\071\ufff0\073\ufff0\101\ufff0\102" +
    "\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\001\002\000\036" +
    "\043\uffea\046\uffea\047\uffea\051\uffea\063\uffea\067\uffea\071" +
    "\uffea\073\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea" +
    "\106\uffea\001\002\000\036\043\ufff2\046\ufff2\047\ufff2\051" +
    "\ufff2\063\ufff2\067\ufff2\071\ufff2\073\ufff2\101\ufff2\102\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\106\ufff2\001\002\000\036\043" +
    "\ufff1\046\ufff1\047\ufff1\051\ufff1\063\ufff1\067\ufff1\071\ufff1" +
    "\073\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\106" +
    "\ufff1\001\002\000\036\043\ufff3\046\ufff3\047\ufff3\051\ufff3" +
    "\063\ufff3\067\ufff3\071\ufff3\073\ufff3\101\ufff3\102\ufff3\103" +
    "\ufff3\104\ufff3\105\ufff3\106\ufff3\001\002\000\004\101\156" +
    "\001\002\000\036\043\uffed\046\uffed\047\uffed\051\uffed\063" +
    "\uffed\067\uffed\071\uffed\073\uffed\101\uffed\102\uffed\103\uffed" +
    "\104\uffed\105\uffed\106\uffed\001\002\000\036\043\uffe9\046" +
    "\uffe9\047\uffe9\051\uffe9\063\uffe9\067\uffe9\071\uffe9\073\uffe9" +
    "\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9\001" +
    "\002\000\036\043\uffe5\046\uffe5\047\uffe5\051\uffe5\063\uffe5" +
    "\067\uffe5\071\uffe5\073\uffe5\101\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\105\uffe5\106\uffe5\001\002\000\070\030\uffcb\034\uffcb" +
    "\044\uffcb\045\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\065\uffcb\066\uffcb\070\uffcb\072\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\001\002" +
    "\000\070\030\uffcc\034\uffcc\044\uffcc\045\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\070\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\100\uffcc\001\002\000\070\030\uffd1\034\136\044" +
    "\131\045\135\050\154\051\130\052\143\053\140\054\134" +
    "\055\152\056\132\057\141\060\145\061\153\062\133\063" +
    "\150\064\146\065\147\066\144\070\uffd1\072\uffd1\073\137" +
    "\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\151\001\002\000" +
    "\040\043\106\046\113\047\123\051\101\063\122\067\114" +
    "\071\115\073\107\074\167\101\110\102\124\103\126\104" +
    "\103\105\102\106\125\001\002\000\056\034\136\044\131" +
    "\045\135\050\154\051\130\052\143\053\140\054\134\055" +
    "\152\056\132\057\141\060\145\061\153\062\133\063\150" +
    "\064\146\065\147\066\144\073\137\074\162\076\163\100" +
    "\151\001\002\000\070\030\uffc8\034\uffc8\044\uffc8\045\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\070\uffc8\072\uffc8\073\uffc8\074\uffc8\075" +
    "\uffc8\076\uffc8\077\uffc8\100\uffc8\001\002\000\040\043\106" +
    "\046\113\047\123\051\101\063\122\067\114\071\115\073" +
    "\107\074\164\101\110\102\124\103\126\104\103\105\102" +
    "\106\125\001\002\000\070\030\uffc5\034\uffc5\044\uffc5\045" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\070\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\100\uffc5\001\002\000\054\034" +
    "\136\044\131\045\135\050\154\051\130\052\143\053\140" +
    "\054\134\055\152\056\132\057\141\060\145\061\153\062" +
    "\133\063\150\064\146\065\147\066\144\073\137\074\166" +
    "\100\151\001\002\000\070\030\uffc7\034\uffc7\044\uffc7\045" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\070\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\100\uffc7\001\002\000\070\030" +
    "\uffc4\034\uffc4\044\uffc4\045\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\070\uffc4" +
    "\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\001\002\000\054\034\136\044\131\045\135\050\154" +
    "\051\130\052\143\053\140\054\134\055\152\056\132\057" +
    "\141\060\145\061\153\062\133\063\150\064\146\065\147" +
    "\066\144\073\137\074\171\100\151\001\002\000\070\030" +
    "\uffc6\034\uffc6\044\uffc6\045\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\070\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100" +
    "\uffc6\001\002\000\004\075\173\001\002\000\034\021\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\072\uffb3\101\uffb3\001\002" +
    "\000\036\043\106\046\113\047\123\051\101\063\122\067" +
    "\114\071\115\073\107\101\110\102\124\103\126\104\103" +
    "\105\102\106\125\001\002\000\012\070\uff86\072\uff86\074" +
    "\uff86\075\uff86\001\002\000\064\034\136\044\131\045\135" +
    "\050\154\051\130\052\143\053\140\054\134\055\152\056" +
    "\132\057\141\060\145\061\153\062\133\063\150\064\146" +
    "\065\147\066\144\070\uff87\072\uff87\073\137\074\uff87\075" +
    "\uff87\077\174\100\151\001\002\000\012\070\uff88\072\uff88" +
    "\074\uff88\075\uff88\001\002\000\070\030\uffd2\034\uffd2\044" +
    "\uffd2\045\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2\072\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\001\002\000" +
    "\004\072\202\001\002\000\070\030\uffd3\034\uffd3\044\uffd3" +
    "\045\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\070\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\001\002\000\070" +
    "\030\uffd6\034\uffd6\044\uffd6\045\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\070" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6" +
    "\100\uffd6\001\002\000\004\070\215\001\002\000\056\034" +
    "\136\044\131\045\135\050\154\051\130\052\143\053\140" +
    "\054\134\055\152\056\132\057\141\060\145\061\153\062" +
    "\133\063\150\064\146\065\147\066\144\070\206\073\137" +
    "\076\207\100\151\001\002\000\070\030\uffcd\034\uffcd\044" +
    "\uffcd\045\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd\072\uffcd\073\uffcd" +
    "\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\001\002\000" +
    "\036\043\106\046\113\047\123\051\101\063\122\067\114" +
    "\071\115\073\107\101\110\102\124\103\126\104\103\105" +
    "\102\106\125\001\002\000\056\034\136\044\131\045\135" +
    "\050\154\051\130\052\143\053\140\054\134\055\152\056" +
    "\132\057\141\060\145\061\153\062\133\063\150\064\146" +
    "\065\147\066\144\070\uff7e\073\137\077\211\100\151\001" +
    "\002\000\036\043\106\046\113\047\123\051\101\063\122" +
    "\067\114\071\115\073\107\101\110\102\124\103\126\104" +
    "\103\105\102\106\125\001\002\000\004\070\uff7d\001\002" +
    "\000\004\070\uff7f\001\002\000\054\034\136\044\131\045" +
    "\135\050\154\051\130\052\143\053\140\054\134\055\152" +
    "\056\132\057\141\060\145\061\153\062\133\063\150\064" +
    "\146\065\147\066\144\073\137\076\207\100\151\001\002" +
    "\000\070\030\uffd7\034\uffd7\044\uffd7\045\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066" +
    "\uffd7\070\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7" +
    "\077\uffd7\100\uffd7\001\002\000\040\043\106\046\113\047" +
    "\123\051\101\063\122\067\114\070\217\071\115\073\107" +
    "\101\110\102\124\103\126\104\103\105\102\106\125\001" +
    "\002\000\070\030\uff90\034\uff90\044\uff90\045\uff90\050\uff90" +
    "\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90" +
    "\066\uff90\070\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\077\uff90\100\uff90\001\002\000\004\070\221\001\002" +
    "\000\070\030\uff91\034\uff91\044\uff91\045\uff91\050\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066" +
    "\uff91\070\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91" +
    "\077\uff91\100\uff91\001\002\000\070\030\uffd4\034\uffd4\044" +
    "\uffd4\045\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\070\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\001\002\000" +
    "\004\074\224\001\002\000\070\030\uffd5\034\uffd5\044\uffd5" +
    "\045\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\070\uffd5\072\uffd5\073\uffd5\074" +
    "\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\001\002\000\070" +
    "\030\uffd0\034\uffd0\044\uffd0\045\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\070" +
    "\uffd0\072\uffd0\073\137\074\uffd0\075\uffd0\076\uffd0\077\uffd0" +
    "\100\151\001\002\000\034\021\uffb4\023\uffb4\024\uffb4\026" +
    "\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\072\uffb4\101\uffb4\001\002\000\006\051\uff80\077" +
    "\230\001\002\000\006\051\uff82\101\246\001\002\000\004" +
    "\051\232\001\002\000\004\042\233\001\002\000\036\043" +
    "\106\046\113\047\123\051\101\063\122\067\114\071\234" +
    "\073\107\101\110\102\124\103\126\104\103\105\102\106" +
    "\125\001\002\000\054\021\060\023\056\027\066\033\052" +
    "\036\065\037\071\043\106\046\113\047\123\051\101\063" +
    "\122\067\114\071\115\072\200\073\107\101\237\102\124" +
    "\103\126\104\103\105\102\106\125\001\002\000\070\030" +
    "\uffa3\034\uffa3\044\uffa3\045\uffa3\050\uffa3\051\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\070\uffa3" +
    "\072\uffa3\073\137\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100" +
    "\151\001\002\000\004\072\244\001\002\000\062\034\uffda" +
    "\041\uff9f\044\uffda\045\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\240\072" +
    "\uffda\073\uffda\077\uffda\100\075\001\002\000\040\043\106" +
    "\046\113\047\123\051\101\063\122\067\114\070\241\071" +
    "\115\073\107\101\110\102\124\103\126\104\103\105\102" +
    "\106\125\001\002\000\060\034\uff90\044\uff90\045\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\072\uff90\073\uff90\075\226\077\uff90\100\uff90" +
    "\001\002\000\004\070\243\001\002\000\060\034\uff91\044" +
    "\uff91\045\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\072\uff91\073\uff91\075\173" +
    "\077\uff91\100\uff91\001\002\000\070\030\uffa2\034\uffa2\044" +
    "\uffa2\045\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\065\uffa2\066\uffa2\070\uffa2\072\uffa2\073\uffa2" +
    "\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\001\002\000" +
    "\004\051\uff81\001\002\000\006\051\uff80\077\230\001\002" +
    "\000\004\051\uff83\001\002\000\054\034\136\044\131\045" +
    "\135\050\154\051\130\052\143\053\140\054\134\055\152" +
    "\056\132\057\141\060\145\061\153\062\133\063\150\064" +
    "\146\065\147\066\144\073\137\075\uffbc\100\151\001\002" +
    "\000\034\021\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8\037\uffb8\072\uffb8" +
    "\101\uffb8\001\002\000\036\043\106\046\113\047\123\051" +
    "\101\063\122\067\114\071\115\073\107\101\110\102\124" +
    "\103\126\104\103\105\102\106\125\001\002\000\004\075" +
    "\uffa0\001\002\000\054\030\255\034\136\044\131\045\135" +
    "\050\154\051\130\052\143\053\140\054\134\055\152\056" +
    "\132\057\141\060\145\061\153\062\133\063\150\064\146" +
    "\065\147\066\144\073\137\100\151\001\002\000\022\021" +
    "\060\023\262\027\066\033\052\035\264\036\065\037\071" +
    "\101\261\001\002\000\032\021\uffae\023\uffae\024\uffae\026" +
    "\uffae\027\uffae\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae" +
    "\037\uffae\101\uffae\001\002\000\032\021\uffac\023\uffac\024" +
    "\uffac\026\uffac\027\uffac\031\uffac\032\uffac\033\uffac\035\uffac" +
    "\036\uffac\037\uffac\101\uffac\001\002\000\032\021\060\023" +
    "\262\024\uff8b\026\uff8b\027\066\031\uff8b\032\uff8b\033\052" +
    "\035\264\036\065\037\071\101\261\001\002\000\010\041" +
    "\uff9f\067\074\100\075\001\002\000\004\067\272\001\002" +
    "\000\004\031\271\001\002\000\006\075\266\102\267\001" +
    "\002\000\032\021\uffad\023\uffad\024\uffad\026\uffad\027\uffad" +
    "\031\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037\uffad\101" +
    "\uffad\001\002\000\032\021\uff9d\023\uff9d\024\uff9d\026\uff9d" +
    "\027\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\101\uff9d\001\002\000\004\075\270\001\002\000\032" +
    "\021\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\035\uff9c\036\uff9c\037\uff9c\101\uff9c\001\002" +
    "\000\034\021\uff92\023\uff92\024\uff92\026\uff92\027\uff92\031" +
    "\uff92\032\uff92\033\uff92\035\uff92\036\uff92\037\uff92\072\uff92" +
    "\101\uff92\001\002\000\036\043\106\046\113\047\123\051" +
    "\101\063\122\067\114\071\115\073\107\101\110\102\124" +
    "\103\126\104\103\105\102\106\125\001\002\000\054\034" +
    "\136\044\131\045\135\050\154\051\130\052\143\053\140" +
    "\054\134\055\152\056\132\057\141\060\145\061\153\062" +
    "\133\063\150\064\146\065\147\066\144\070\274\073\137" +
    "\100\151\001\002\000\004\025\275\001\002\000\022\021" +
    "\060\023\262\027\066\033\052\035\264\036\065\037\071" +
    "\101\261\001\002\000\010\024\uff94\026\uff94\032\277\001" +
    "\002\000\004\067\305\001\002\000\006\024\301\026\302" +
    "\001\002\000\032\021\uff99\023\uff99\024\uff99\026\uff99\027" +
    "\uff99\031\uff99\032\uff99\033\uff99\035\uff99\036\uff99\037\uff99" +
    "\101\uff99\001\002\000\022\021\060\023\262\027\066\033" +
    "\052\035\264\036\065\037\071\101\261\001\002\000\004" +
    "\024\304\001\002\000\032\021\uff98\023\uff98\024\uff98\026" +
    "\uff98\027\uff98\031\uff98\032\uff98\033\uff98\035\uff98\036\uff98" +
    "\037\uff98\101\uff98\001\002\000\036\043\106\046\113\047" +
    "\123\051\101\063\122\067\114\071\115\073\107\101\110" +
    "\102\124\103\126\104\103\105\102\106\125\001\002\000" +
    "\054\034\136\044\131\045\135\050\154\051\130\052\143" +
    "\053\140\054\134\055\152\056\132\057\141\060\145\061" +
    "\153\062\133\063\150\064\146\065\147\066\144\070\307" +
    "\073\137\100\151\001\002\000\004\025\310\001\002\000" +
    "\022\021\060\023\262\027\066\033\052\035\264\036\065" +
    "\037\071\101\261\001\002\000\010\024\uff94\026\uff94\032" +
    "\277\001\002\000\006\024\uff95\026\uff95\001\002\000\012" +
    "\024\uff8c\026\uff8c\031\uff8c\032\uff8c\001\002\000\004\075" +
    "\uffbd\001\002\000\034\021\uffb7\023\uffb7\024\uffb7\026\uffb7" +
    "\027\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\072\uffb7\101\uffb7\001\002\000\034\021\uffb5\023\uffb5" +
    "\024\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\072\uffb5\101\uffb5\001\002\000\054" +
    "\034\136\044\131\045\135\050\154\051\130\052\143\053" +
    "\140\054\134\055\152\056\132\057\141\060\145\061\153" +
    "\062\133\063\150\064\146\065\147\066\144\073\137\075" +
    "\uffb2\100\151\001\002\000\014\024\uff8a\026\uff8a\031\uff8a" +
    "\032\uff8a\072\uff8a\001\002\000\036\043\106\046\113\047" +
    "\123\051\101\063\122\067\114\071\115\073\107\101\110" +
    "\102\124\103\126\104\103\105\102\106\125\001\002\000" +
    "\054\034\136\044\131\045\135\050\154\051\130\052\143" +
    "\053\140\054\134\055\152\056\132\057\141\060\145\061" +
    "\153\062\133\063\150\064\146\065\147\066\144\070\323" +
    "\073\137\100\151\001\002\000\004\025\324\001\002\000" +
    "\020\021\060\023\056\027\066\033\052\036\065\037\071" +
    "\101\261\001\002\000\010\024\uff96\026\uff96\032\326\001" +
    "\002\000\004\067\334\001\002\000\006\024\330\026\331" +
    "\001\002\000\032\021\uff9b\023\uff9b\024\uff9b\026\uff9b\027" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\036\uff9b\037\uff9b\072\uff9b" +
    "\101\uff9b\001\002\000\020\021\060\023\056\027\066\033" +
    "\052\036\065\037\071\101\261\001\002\000\004\024\333" +
    "\001\002\000\032\021\uff9a\023\uff9a\024\uff9a\026\uff9a\027" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\036\uff9a\037\uff9a\072\uff9a" +
    "\101\uff9a\001\002\000\036\043\106\046\113\047\123\051" +
    "\101\063\122\067\114\071\115\073\107\101\110\102\124" +
    "\103\126\104\103\105\102\106\125\001\002\000\054\034" +
    "\136\044\131\045\135\050\154\051\130\052\143\053\140" +
    "\054\134\055\152\056\132\057\141\060\145\061\153\062" +
    "\133\063\150\064\146\065\147\066\144\070\336\073\137" +
    "\100\151\001\002\000\004\025\337\001\002\000\020\021" +
    "\060\023\056\027\066\033\052\036\065\037\071\101\261" +
    "\001\002\000\010\024\uff96\026\uff96\032\326\001\002\000" +
    "\006\024\uff97\026\uff97\001\002\000\034\021\uffb9\023\uffb9" +
    "\024\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\072\uffb9\101\uffb9\001\002\000\036" +
    "\043\106\046\113\047\123\051\101\063\122\067\114\071" +
    "\115\073\107\101\110\102\124\103\126\104\103\105\102" +
    "\106\125\001\002\000\054\034\136\044\131\045\135\050" +
    "\154\051\130\052\143\053\140\054\134\055\152\056\132" +
    "\057\141\060\145\061\153\062\133\063\150\064\146\065" +
    "\147\066\144\070\345\073\137\100\151\001\002\000\004" +
    "\030\346\001\002\000\020\021\060\023\056\027\066\033" +
    "\052\036\065\037\071\101\261\001\002\000\004\031\350" +
    "\001\002\000\034\021\uff93\023\uff93\024\uff93\026\uff93\027" +
    "\uff93\031\uff93\032\uff93\033\uff93\035\uff93\036\uff93\037\uff93" +
    "\072\uff93\101\uff93\001\002\000\004\075\uffbb\001\002\000" +
    "\056\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\027\uffc3\033\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\101\uffc3\001\002\000\026\004\011\005" +
    "\035\006\032\007\021\010\014\011\020\012\031\013\025" +
    "\015\030\101\015\001\002\000\004\057\355\001\002\000" +
    "\010\057\ufffc\077\ufffc\101\ufffc\001\002\000\054\004\uff84" +
    "\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013" +
    "\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84" +
    "\022\uff84\023\uff84\027\uff84\033\uff84\036\uff84\037\uff84\101" +
    "\uff84\001\002\000\004\072\360\001\002\000\004\075\361" +
    "\001\002\000\004\002\uffff\001\002\000\056\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\027\uffbe\033\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\101\uffbe\001\002\000\004\041\364\001\002\000\004\051" +
    "\101\001\002\000\004\075\uffa5\001\002\000\026\004\011" +
    "\005\035\006\032\007\021\010\014\011\020\012\031\013" +
    "\025\015\030\101\015\001\002\000\004\077\370\001\002" +
    "\000\026\004\011\005\035\006\032\007\021\010\014\011" +
    "\020\012\031\013\025\015\030\101\015\001\002\000\004" +
    "\057\372\001\002\000\010\057\ufffe\077\ufffe\101\ufffe\001" +
    "\002\000\056\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\027\uffc1\033\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\101\uffc1\001\002\000\006\041" +
    "\375\075\uffab\001\002\000\036\043\106\046\113\047\123" +
    "\051\101\063\122\067\114\071\115\073\107\101\110\102" +
    "\124\103\126\104\103\105\102\106\125\001\002\000\004" +
    "\075\uffa1\001\002\000\004\075\uffa4\001\002\000\004\101" +
    "\u0101\001\002\000\014\067\uffab\070\uffab\072\uffab\075\uffab" +
    "\077\uffab\001\002\000\004\071\u0103\001\002\000\026\004" +
    "\011\005\035\006\032\007\021\010\014\011\020\012\031" +
    "\013\025\015\030\101\015\001\002\000\006\072\uff8d\077" +
    "\u0105\001\002\000\026\004\011\005\035\006\032\007\021" +
    "\010\014\011\020\012\031\013\025\015\030\101\015\001" +
    "\002\000\004\072\u0107\001\002\000\004\075\uffaa\001\002" +
    "\000\010\070\uff8d\072\uff8d\077\u0105\001\002\000\006\070" +
    "\uff8e\072\uff8e\001\002\000\006\070\uff8f\072\uff8f\001\002" +
    "\000\004\067\u0118\001\002\000\006\067\u010d\101\ufff7\001" +
    "\002\000\030\004\011\005\035\006\032\007\021\010\014" +
    "\011\020\012\031\013\025\015\030\070\u010f\101\015\001" +
    "\002\000\006\070\uff8d\077\u0105\001\002\000\004\071\u0110" +
    "\001\002\000\054\004\uff84\005\uff84\006\uff84\007\uff84\010" +
    "\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\027\uff84\033" +
    "\uff84\036\uff84\037\uff84\101\uff84\001\002\000\004\072\u0112" +
    "\001\002\000\004\075\uffa9\001\002\000\004\070\u0114\001" +
    "\002\000\004\071\u0115\001\002\000\054\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84" +
    "\023\uff84\027\uff84\033\uff84\036\uff84\037\uff84\101\uff84\001" +
    "\002\000\004\072\u0117\001\002\000\004\075\uffa7\001\002" +
    "\000\030\004\011\005\035\006\032\007\021\010\014\011" +
    "\020\012\031\013\025\015\030\070\u011a\101\015\001\002" +
    "\000\006\070\uff8d\077\u0105\001\002\000\004\071\u011b\001" +
    "\002\000\054\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017" +
    "\uff84\020\uff84\021\uff84\022\uff84\023\uff84\027\uff84\033\uff84" +
    "\036\uff84\037\uff84\101\uff84\001\002\000\004\072\u011d\001" +
    "\002\000\004\075\uffa8\001\002\000\004\070\u011f\001\002" +
    "\000\004\071\u0120\001\002\000\054\004\uff84\005\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023" +
    "\uff84\027\uff84\033\uff84\036\uff84\037\uff84\101\uff84\001\002" +
    "\000\004\072\u0122\001\002\000\004\075\uffa6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\006\002\003\025\004\001\001\000\002\001" +
    "\001\000\024\003\015\007\005\010\025\012\035\013\032" +
    "\014\022\021\012\066\016\067\033\001\001\000\002\001" +
    "\001\000\006\010\u010a\021\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\376\021\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\050" +
    "\040\047\001\001\000\002\001\001\000\050\004\071\007" +
    "\005\010\025\012\035\013\032\014\022\021\012\046\052" +
    "\051\053\053\060\060\056\061\063\066\016\067\033\070" +
    "\061\071\062\072\067\073\054\076\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\317\046\052\051\053" +
    "\053\060\060\056\061\063\070\061\071\062\072\067\073" +
    "\054\076\066\001\001\000\020\015\115\033\077\034\111" +
    "\037\104\047\110\064\316\101\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\115\033\077\034\111\037" +
    "\104\047\110\064\253\101\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\115\033\077\034\111\037" +
    "\104\047\110\064\247\101\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\115\024\120\033\077\034" +
    "\111\037\104\047\110\064\116\101\117\001\001\000\004" +
    "\076\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\115\033\077\034\111\037\104\047\110\064\224\101\117" +
    "\001\001\000\022\015\115\024\222\033\077\034\111\037" +
    "\104\047\110\064\116\101\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\115\033\077\034\111\037\104\047\110\064\204" +
    "\100\203\101\117\001\001\000\022\015\115\024\200\033" +
    "\077\034\111\037\104\047\110\064\116\101\117\001\001" +
    "\000\002\001\001\000\010\065\141\103\154\111\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\115" +
    "\033\077\034\111\037\104\047\110\064\126\101\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\065\141\103\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\115\033\077\034\111\037\104\047\110" +
    "\064\160\101\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\115\033\077\034\111\037\104\047\110" +
    "\064\156\101\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\065\141\103\154\001\001\000\020\015" +
    "\115\033\077\034\111\037\104\047\110\064\167\101\117" +
    "\001\001\000\006\065\141\103\154\001\001\000\002\001" +
    "\001\000\020\015\115\033\077\034\111\037\104\047\110" +
    "\064\164\101\117\001\001\000\002\001\001\000\006\065" +
    "\141\103\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\065\141\103\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\115\033\077" +
    "\034\111\037\104\047\110\064\175\101\117\001\001\000" +
    "\002\001\001\000\010\065\141\103\154\111\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\065\141\103\154\001\001\000\002\001\001\000\020\015" +
    "\115\033\077\034\111\037\104\047\110\064\207\101\117" +
    "\001\001\000\010\065\141\103\154\110\211\001\001\000" +
    "\022\015\115\033\077\034\111\037\104\047\110\064\213" +
    "\100\212\101\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\065\141\103\154\001\001\000\002\001\001" +
    "\000\022\015\115\024\217\033\077\034\111\037\104\047" +
    "\110\064\116\101\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\065\141\103\154\001\001" +
    "\000\002\001\001\000\004\075\230\001\001\000\004\074" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\115\033\077\034\111\037\104\047\110\064\234\101" +
    "\117\001\001\000\050\004\235\015\115\024\200\033\077" +
    "\034\111\037\104\046\052\047\110\051\053\053\060\060" +
    "\056\061\063\064\116\070\061\071\062\072\067\073\054" +
    "\076\066\101\117\001\001\000\006\065\141\103\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\015\115" +
    "\024\241\033\077\034\111\037\104\047\110\064\116\101" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\246\001\001\000\002\001\001\000\006\065\141\103\154" +
    "\001\001\000\002\001\001\000\022\015\115\024\252\033" +
    "\077\034\111\037\104\047\110\064\116\101\117\001\001" +
    "\000\002\001\001\000\006\065\141\103\154\001\001\000" +
    "\032\026\262\044\256\046\052\052\264\053\060\054\257" +
    "\061\255\070\061\071\062\072\067\073\054\076\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\026\312" +
    "\044\256\046\052\052\264\053\060\054\257\061\255\070" +
    "\061\071\062\072\067\073\054\076\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\115\033" +
    "\077\034\111\037\104\047\110\064\272\101\117\001\001" +
    "\000\006\065\141\103\154\001\001\000\002\001\001\000" +
    "\032\026\275\044\256\046\052\052\264\053\060\054\257" +
    "\061\255\070\061\071\062\072\067\073\054\076\066\001" +
    "\001\000\004\106\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\026\302\044\256\046" +
    "\052\052\264\053\060\054\257\061\255\070\061\071\062" +
    "\072\067\073\054\076\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\015\115\033\077\034\111\037\104" +
    "\047\110\064\305\101\117\001\001\000\006\065\141\103" +
    "\154\001\001\000\002\001\001\000\032\026\310\044\256" +
    "\046\052\052\264\053\060\054\257\061\255\070\061\071" +
    "\062\072\067\073\054\076\066\001\001\000\004\106\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\065\141" +
    "\103\154\001\001\000\002\001\001\000\020\015\115\033" +
    "\077\034\111\037\104\047\110\064\321\101\117\001\001" +
    "\000\006\065\141\103\154\001\001\000\002\001\001\000" +
    "\030\004\324\046\052\051\053\053\060\060\056\061\063" +
    "\070\061\071\062\072\067\073\054\076\066\001\001\000" +
    "\004\107\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\331\046\052\051\053\053" +
    "\060\060\056\061\063\070\061\071\062\072\067\073\054" +
    "\076\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\115\033\077\034\111\037\104\047\110\064\334" +
    "\101\117\001\001\000\006\065\141\103\154\001\001\000" +
    "\002\001\001\000\030\004\337\046\052\051\053\053\060" +
    "\060\056\061\063\070\061\071\062\072\067\073\054\076" +
    "\066\001\001\000\004\107\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\115\033\077\034\111\037" +
    "\104\047\110\064\343\101\117\001\001\000\006\065\141" +
    "\103\154\001\001\000\002\001\001\000\030\004\346\046" +
    "\052\051\053\053\060\060\056\061\063\070\061\071\062" +
    "\072\067\073\054\076\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\050\040\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\364\001\001\000\002\001\001\000\004" +
    "\021\366\001\001\000\002\001\001\000\004\021\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\115\024\375\033\077\034" +
    "\111\037\104\047\110\064\116\101\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u0103\021\377\001\001" +
    "\000\004\031\u0105\001\001\000\010\010\u0107\021\377\105" +
    "\u0108\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u0109\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\u010d\021\377" +
    "\001\001\000\004\031\u0112\001\001\000\002\001\001\000" +
    "\006\025\050\040\u0110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\050\040\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0118\021\377\001\001\000\004\031\u011d\001" +
    "\001\000\002\001\001\000\006\025\050\040\u011b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\050\040\u0120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        syntaxErrors = true;
            report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right + " " + current_token.value + "\n", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE body RBRACE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= DICT LT type COMMA type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= SEQ LT type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= SET LT type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operator ::= EXPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operator ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operator ::= LTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operator ::= GTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operator ::= CONCAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operator ::= PIPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operator ::= INTERSECTION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operator ::= DIFFERENCE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operator ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // base_expressions ::= set_lit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // base_expressions ::= dict_lit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // base_expressions ::= seq_lit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // base_expressions ::= FLOAT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // base_expressions ::= INT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // base_expressions ::= RAT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // base_expressions ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // base_expressions ::= CHAR_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // base_expressions ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // base_expressions ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // base_expressions ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_expressions",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dict_lit ::= LPAREN dict_element_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_lit",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dict_lit ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_lit",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // seq_lit ::= LBRACK expression_list RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_lit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // seq_lit ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_lit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // set_lit ::= LBRACE expression_list RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_lit",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // set_lit ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_lit",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression operator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= base_expressions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression indexCall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= lambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // indexCall ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexCall",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // indexCall ::= LBRACK expression COLON expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexCall",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // indexCall ::= LBRACK COLON expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexCall",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // indexCall ::= LBRACK expression COLON RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexCall",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // indexCall ::= LBRACK COLON RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexCall",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaration ::= type_and_id SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaration ::= assignment_dec SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaration ::= multithreading SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration ::= tdef SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration ::= fdef SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaration ::= alias SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // read ::= READ IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("read",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print ::= PRINT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multithreading ::= THREAD IDENTIFIER ASSIGN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multithreading",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // base_statement ::= looping 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // base_statement ::= read SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // base_statement ::= print SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // base_statement ::= assignment_stat SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // base_statement ::= function_call_stat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // base_statement ::= return_statement SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_call_stat ::= IDENTIFIER LPAREN RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_stat",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_call_stat ::= IDENTIFIER LPAREN expression_list RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call_stat",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // return_statement ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // return_statement ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= base_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement_with_break ::= base_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_with_break",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement_with_break ::= if_statement_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_with_break",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement_with_break ::= break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_with_break",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_and_id ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_and_id",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tdef ::= TDEF IDENTIFIER LBRACE type_and_id param_list RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tdef",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // fdef ::= FDEF IDENTIFIER LPAREN RPAREN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fdef ::= FDEF type_and_id LPAREN RPAREN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fdef ::= FDEF IDENTIFIER LPAREN type_and_id param_list RPAREN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fdef ::= FDEF type_and_id LPAREN type_and_id param_list RPAREN LBRACE body RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fdef ::= FUNC IDENTIFIER ASSIGN lambda 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // alias ::= ALIAS type_and_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lambda ::= PIPE IDENTIFIER id_list PIPE ARROW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lambda ::= PIPE IDENTIFIER id_list PIPE ARROW LBRACE statement_list RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambda",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignment_dec ::= type IDENTIFIER ASSIGN expression_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_dec",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assignment_stat ::= identifier_list ASSIGN expression_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_stat",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // identifier_list ::= IDENTIFIER DOT identifier_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // break ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // break ::= BREAK INT_LIT SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_statement ::= IF LPAREN expression RPAREN THEN statement_list elif FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_statement ::= IF LPAREN expression RPAREN THEN statement_list elif ELSE statement_list FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_statement_break ::= IF LPAREN expression RPAREN THEN statement_list_with_break elif_break FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_break",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if_statement_break ::= IF LPAREN expression RPAREN THEN statement_list_with_break elif_break ELSE statement_list_with_break FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement_break",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // elif ::= ELIF LPAREN expression RPAREN THEN statement_list elif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // elif ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // elif_break ::= ELIF LPAREN expression RPAREN THEN statement_list_with_break elif_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_break",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // elif_break ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elif_break",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // looping ::= FORALL LPAREN expression RPAREN DO statement_list OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("looping",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // looping ::= WHILE expression DO statement_list_with_break OD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("looping",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function_call ::= IDENTIFIER LPAREN expression_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function_call ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // param_list_helper ::= type_and_id param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list_helper",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // param_list ::= COMMA param_list_helper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // param_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // statement_list_with_break ::= statement_with_break statement_list_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list_with_break",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement_list_with_break ::= statement_with_break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list_with_break",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement_list ::= statement statement_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_list_helper ::= COMMA expression expression_list_helper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_helper",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_list_helper ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_helper",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_list ::= expression expression_list_helper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // declaration_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // id_list_helper ::= IDENTIFIER id_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list_helper",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // id_list_helper ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list_helper",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // id_list ::= COMMA id_list_helper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // id_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // dictbody_helper ::= COMMA dict_element_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictbody_helper",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // dictbody_helper ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictbody_helper",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // dict_element_list ::= expression COLON expression dictbody_helper 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_element_list",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // body ::= declaration_list statement_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
